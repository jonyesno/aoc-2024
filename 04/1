#!/usr/bin/env ruby

class Grid
  def initialize(grid)
    @grid = grid
    @mx = grid.first.length - 1
    @my = grid.length - 1
  end

  def at(coord)
    x = coord.x
    y = coord.y
    case
    when x < 0 || y < 0
      '.'
    when x > @mx || y > @my
      '.'
    else
      @grid[y][x]
    end
  end

  def to_s
    @grid.join("\n")
  end

  def find(coord, value)
    x = coord.x
    y = coord.y

    while self.at(Coord.new(x,y)) != value
      case
      when x < @mx
        x += 1
      when x >= @mx && y < @my
        x = 0 ; y += 1
      else
        # fell of the end
        return false
      end
    end

    Coord.new(x,y)
  end
end

Coord = Struct.new(:x,:y) do
  # 701
  # 6 2
  # 543

  def next(dir)
    delta = [ [0,-1], [1,-1], [1,0], [1,1], [0,1], [-1,1], [-1,0], [-1,-1] ][dir]
    Coord.new(x + delta.first, y + delta.last)
  end
end

grid = Grid.new(ARGF.readlines.map(&:chomp))

t = 0
at = Coord.new(-1,0)
while at = grid.find(at.next(2), 'X')
  (0 .. 7).each do |dir|
    found = 'X'
    (1 .. 3).inject(at) { |coord, idx| coord = coord.next(dir) ; found << grid.at(coord) ; coord }
    t += 1 if found == 'XMAS'
  end
end

puts t # 2483
